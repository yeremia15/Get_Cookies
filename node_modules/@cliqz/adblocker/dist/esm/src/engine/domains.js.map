{"version":3,"file":"domains.js","sources":["../../../src/src/engine/domains.js"],"sourcesContent":["/*!\n * Copyright (c) 2017-present Cliqz GmbH. All rights reserved.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\nimport { hashHostnameBackward } from '../request';\nimport { toASCII } from '../punycode';\nimport { sizeOfUint32Array, sizeOfUTF8 } from '../data-view';\nimport { binLookup, hasUnicode, HASH_INTERNAL_MULT } from '../utils';\nexport class Domains {\n    static parse(parts, debug = false) {\n        if (parts.length === 0) {\n            return undefined;\n        }\n        const entities = [];\n        const notEntities = [];\n        const hostnames = [];\n        const notHostnames = [];\n        for (let hostname of parts) {\n            if (hasUnicode(hostname)) {\n                hostname = toASCII(hostname);\n            }\n            const negation = hostname.charCodeAt(0) === 126; /* '~' */\n            const entity = hostname.charCodeAt(hostname.length - 1) === 42 /* '*' */ &&\n                hostname.charCodeAt(hostname.length - 2) === 46; /* '.' */\n            const start = negation ? 1 : 0;\n            const end = entity ? hostname.length - 2 : hostname.length;\n            const hash = hashHostnameBackward(negation === true || entity === true ? hostname.slice(start, end) : hostname);\n            if (negation) {\n                if (entity) {\n                    notEntities.push(hash);\n                }\n                else {\n                    notHostnames.push(hash);\n                }\n            }\n            else {\n                if (entity) {\n                    entities.push(hash);\n                }\n                else {\n                    hostnames.push(hash);\n                }\n            }\n        }\n        return new Domains({\n            entities: entities.length !== 0 ? new Uint32Array(entities).sort() : undefined,\n            hostnames: hostnames.length !== 0 ? new Uint32Array(hostnames).sort() : undefined,\n            notEntities: notEntities.length !== 0 ? new Uint32Array(notEntities).sort() : undefined,\n            notHostnames: notHostnames.length !== 0 ? new Uint32Array(notHostnames).sort() : undefined,\n            parts: debug === true ? parts.join(',') : undefined,\n        });\n    }\n    static deserialize(buffer) {\n        const optionalParts = buffer.getUint8();\n        // The order of these fields should be the same as when we serialize them.\n        return new Domains({\n            entities: (optionalParts & 1) === 1 ? buffer.getUint32Array() : undefined,\n            hostnames: (optionalParts & 2) === 2 ? buffer.getUint32Array() : undefined,\n            notEntities: (optionalParts & 4) === 4 ? buffer.getUint32Array() : undefined,\n            notHostnames: (optionalParts & 8) === 8 ? buffer.getUint32Array() : undefined,\n            parts: (optionalParts & 16) === 16 ? buffer.getUTF8() : undefined,\n        });\n    }\n    constructor({ entities, hostnames, notEntities, notHostnames, parts, }) {\n        // Hostname constraints\n        this.entities = entities;\n        this.hostnames = hostnames;\n        // Hostname exceptions\n        this.notEntities = notEntities;\n        this.notHostnames = notHostnames;\n        // Debug\n        this.parts = parts;\n    }\n    updateId(hash) {\n        const { hostnames, entities, notHostnames, notEntities } = this;\n        if (hostnames !== undefined) {\n            for (const hostname of hostnames) {\n                hash = (hash * HASH_INTERNAL_MULT) ^ hostname;\n            }\n        }\n        if (entities !== undefined) {\n            for (const entity of entities) {\n                hash = (hash * HASH_INTERNAL_MULT) ^ entity;\n            }\n        }\n        if (notHostnames !== undefined) {\n            for (const notHostname of notHostnames) {\n                hash = (hash * HASH_INTERNAL_MULT) ^ notHostname;\n            }\n        }\n        if (notEntities !== undefined) {\n            for (const notEntity of notEntities) {\n                hash = (hash * HASH_INTERNAL_MULT) ^ notEntity;\n            }\n        }\n        return hash;\n    }\n    serialize(buffer) {\n        // Mandatory fields\n        const index = buffer.getPos();\n        buffer.pushUint8(0);\n        // This bit-mask indicates which optional parts of the filter were serialized.\n        let optionalParts = 0;\n        if (this.entities !== undefined) {\n            optionalParts |= 1;\n            buffer.pushUint32Array(this.entities);\n        }\n        if (this.hostnames !== undefined) {\n            optionalParts |= 2;\n            buffer.pushUint32Array(this.hostnames);\n        }\n        if (this.notEntities !== undefined) {\n            optionalParts |= 4;\n            buffer.pushUint32Array(this.notEntities);\n        }\n        if (this.notHostnames !== undefined) {\n            optionalParts |= 8;\n            buffer.pushUint32Array(this.notHostnames);\n        }\n        if (this.parts !== undefined) {\n            optionalParts |= 16;\n            buffer.pushUTF8(this.parts);\n        }\n        buffer.setByte(index, optionalParts);\n    }\n    getSerializedSize() {\n        let estimate = 1; // optional parts (1 byte)\n        if (this.entities !== undefined) {\n            estimate += sizeOfUint32Array(this.entities);\n        }\n        if (this.hostnames !== undefined) {\n            estimate += sizeOfUint32Array(this.hostnames);\n        }\n        if (this.notHostnames !== undefined) {\n            estimate += sizeOfUint32Array(this.notHostnames);\n        }\n        if (this.notEntities !== undefined) {\n            estimate += sizeOfUint32Array(this.notEntities);\n        }\n        if (this.parts !== undefined) {\n            estimate += sizeOfUTF8(this.parts);\n        }\n        return estimate;\n    }\n    match(hostnameHashes, entityHashes) {\n        // Check if `hostname` is blacklisted\n        if (this.notHostnames !== undefined) {\n            for (const hash of hostnameHashes) {\n                if (binLookup(this.notHostnames, hash)) {\n                    return false;\n                }\n            }\n        }\n        // Check if `hostname` is blacklisted by *entity*\n        if (this.notEntities !== undefined) {\n            for (const hash of entityHashes) {\n                if (binLookup(this.notEntities, hash)) {\n                    return false;\n                }\n            }\n        }\n        // Check if `hostname` is allowed\n        if (this.hostnames !== undefined || this.entities !== undefined) {\n            if (this.hostnames !== undefined) {\n                for (const hash of hostnameHashes) {\n                    if (binLookup(this.hostnames, hash)) {\n                        return true;\n                    }\n                }\n            }\n            if (this.entities !== undefined) {\n                for (const hash of entityHashes) {\n                    if (binLookup(this.entities, hash)) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n        return true;\n    }\n}\n//# sourceMappingURL=domains.js.map"],"names":[],"mappings":"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"}