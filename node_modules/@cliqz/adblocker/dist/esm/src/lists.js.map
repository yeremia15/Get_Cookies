{"version":3,"file":"lists.js","sources":["../../src/src/lists.js"],"sourcesContent":["/*!\n * Copyright (c) 2017-present Cliqz GmbH. All rights reserved.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\nimport Config from './config';\nimport CosmeticFilter from './filters/cosmetic';\nimport NetworkFilter from './filters/network';\nimport Preprocessor, { detectPreprocessor } from './preprocessor';\nimport { fastStartsWith, fastStartsWithFrom } from './utils';\n/**\n * Given a single line (string), checks if this would likely be a cosmetic\n * filter, a network filter or something that is not supported. This check is\n * performed before calling a more specific parser to create an instance of\n * `NetworkFilter` or `CosmeticFilter`.\n */\nexport function detectFilterType(line) {\n    // Ignore empty line\n    if (line.length === 0 || line.length === 1) {\n        return 0 /* FilterType.NOT_SUPPORTED */;\n    }\n    // Ignore comments\n    const firstCharCode = line.charCodeAt(0);\n    const secondCharCode = line.charCodeAt(1);\n    if (firstCharCode === 33 /* '!' */ ||\n        (firstCharCode === 35 /* '#' */ && secondCharCode <= 32) ||\n        (firstCharCode === 91 /* '[' */ && fastStartsWith(line, '[Adblock'))) {\n        return 0 /* FilterType.NOT_SUPPORTED */;\n    }\n    // Fast heuristics to detect network filters\n    const lastCharCode = line.charCodeAt(line.length - 1);\n    if (firstCharCode === 36 /* '$' */ ||\n        firstCharCode === 38 /* '&' */ ||\n        firstCharCode === 42 /* '*' */ ||\n        firstCharCode === 45 /* '-' */ ||\n        firstCharCode === 46 /* '.' */ ||\n        firstCharCode === 47 /* '/' */ ||\n        firstCharCode === 58 /* ':' */ ||\n        firstCharCode === 61 /* '=' */ ||\n        firstCharCode === 63 /* '?' */ ||\n        firstCharCode === 64 /* '@' */ ||\n        firstCharCode === 95 /* '_' */ ||\n        firstCharCode === 124 /* '|' */ ||\n        lastCharCode === 124 /* '|' */) {\n        return 1 /* FilterType.NETWORK */;\n    }\n    // Ignore Adguard cosmetics\n    // `$$` = HTML filtering rules\n    const dollarIndex = line.indexOf('$');\n    if (dollarIndex !== -1 && dollarIndex !== line.length - 1) {\n        const afterDollarIndex = dollarIndex + 1;\n        const afterDollarCharCode = line.charCodeAt(afterDollarIndex);\n        // Ignore Adguard HTML rewrite rules\n        if (afterDollarCharCode === 36 /* '$' */ ||\n            (afterDollarCharCode === 64 /* '@' */ &&\n                fastStartsWithFrom(line, /* $@$ */ '@$', afterDollarIndex))) {\n            return 0 /* FilterType.NOT_SUPPORTED */;\n        }\n    }\n    // Check if filter is cosmetics\n    const sharpIndex = line.indexOf('#');\n    if (sharpIndex !== -1 && sharpIndex !== line.length - 1) {\n        const afterSharpIndex = sharpIndex + 1;\n        const afterSharpCharCode = line.charCodeAt(afterSharpIndex);\n        if (afterSharpCharCode === 35 /* '#'*/ ||\n            (afterSharpCharCode === 64 /* '@' */ &&\n                fastStartsWithFrom(line, /* #@# */ '@#', afterSharpIndex))\n        // TODO - support ADB/AdGuard extended css selectors\n        // || (afterSharpCharCode === 63 /* '?' */ &&\n        //   fastStartsWithFrom(line, /* #?# */ '?#', afterSharpIndex))\n        ) {\n            // Parse supported cosmetic filter\n            // `##` `#@#`\n            return 2 /* FilterType.COSMETIC */;\n        }\n        else if ((afterSharpCharCode === 64 /* '@'*/ &&\n            (fastStartsWithFrom(line, /* #@$# */ '@$#', afterSharpIndex) ||\n                fastStartsWithFrom(line, /* #@%# */ '@%#', afterSharpIndex))) ||\n            (afterSharpCharCode === 37 /* '%' */ &&\n                fastStartsWithFrom(line, /* #%# */ '%#', afterSharpIndex)) ||\n            (afterSharpCharCode === 36 /* '$' */ &&\n                fastStartsWithFrom(line, /* #$# */ '$#', afterSharpIndex)) ||\n            (afterSharpCharCode === 63 /* '?' */ &&\n                fastStartsWithFrom(line, /* #?# */ '?#', afterSharpIndex))) {\n            // Ignore Adguard cosmetics\n            // `#$#` `#@$#`\n            // `#%#` `#@%#`\n            // `#?#`\n            return 0 /* FilterType.NOT_SUPPORTED */;\n        }\n    }\n    // Everything else is a network filter\n    return 1 /* FilterType.NETWORK */;\n}\nexport function parseFilter(filter) {\n    const filterType = detectFilterType(filter);\n    if (filterType === 1 /* FilterType.NETWORK */) {\n        return NetworkFilter.parse(filter, true);\n    }\n    else if (filterType === 2 /* FilterType.COSMETIC */) {\n        return CosmeticFilter.parse(filter, true);\n    }\n    return null;\n}\nexport function f(strings) {\n    return parseFilter(strings[0]);\n}\nexport function parseFilters(list, config = new Config()) {\n    config = new Config(config);\n    const networkFilters = [];\n    const cosmeticFilters = [];\n    const lines = list.split('\\n');\n    const preprocessors = [];\n    const preprocessorStack = [];\n    for (let i = 0; i < lines.length; i += 1) {\n        let line = lines[i];\n        // Check if `line` should be left-trimmed\n        if (line.length !== 0 && line.charCodeAt(0) <= 32) {\n            line = line.trim();\n        }\n        // Handle continuations\n        if (line.length > 2) {\n            while (i < lines.length - 1 &&\n                line.charCodeAt(line.length - 1) === 92 &&\n                line.charCodeAt(line.length - 2) === 32) {\n                line = line.slice(0, -2);\n                const nextLine = lines[i + 1];\n                if (nextLine.length > 4 &&\n                    nextLine.charCodeAt(0) === 32 &&\n                    nextLine.charCodeAt(1) === 32 &&\n                    nextLine.charCodeAt(2) === 32 &&\n                    nextLine.charCodeAt(3) === 32 &&\n                    nextLine.charCodeAt(4) !== 32) {\n                    line += nextLine.slice(4);\n                    i += 1;\n                }\n                else {\n                    break;\n                }\n            }\n        }\n        // Check if `line` should be right-trimmed\n        if (line.length !== 0 && line.charCodeAt(line.length - 1) <= 32) {\n            line = line.trim();\n        }\n        // Detect if filter is supported, network or cosmetic\n        const filterType = detectFilterType(line);\n        if (filterType === 1 /* FilterType.NETWORK */ && config.loadNetworkFilters === true) {\n            const filter = NetworkFilter.parse(line, config.debug);\n            if (filter !== null) {\n                networkFilters.push(filter);\n                if (preprocessorStack.length > 0) {\n                    preprocessorStack[preprocessorStack.length - 1].filterIDs.add(filter.getId());\n                }\n            }\n        }\n        else if (filterType === 2 /* FilterType.COSMETIC */ && config.loadCosmeticFilters === true) {\n            const filter = CosmeticFilter.parse(line, config.debug);\n            if (filter !== null) {\n                if (config.loadGenericCosmeticsFilters === true || filter.isGenericHide() === false) {\n                    cosmeticFilters.push(filter);\n                    if (preprocessorStack.length > 0) {\n                        preprocessorStack[preprocessorStack.length - 1].filterIDs.add(filter.getId());\n                    }\n                }\n            }\n        }\n        else if (config.loadPreprocessors) {\n            const preprocessorToken = detectPreprocessor(line);\n            if (preprocessorToken === 1 /* PreprocessorTokens.BEGIF */) {\n                if (preprocessorStack.length > 0) {\n                    preprocessorStack.push(new Preprocessor({\n                        condition: `(${preprocessorStack[preprocessorStack.length - 1].condition})&&(${Preprocessor.getCondition(line)})`,\n                    }));\n                }\n                else {\n                    preprocessorStack.push(Preprocessor.parse(line));\n                }\n            }\n            else if ((preprocessorToken === 3 /* PreprocessorTokens.ENDIF */ ||\n                preprocessorToken === 2 /* PreprocessorTokens.ELSE */) &&\n                preprocessorStack.length > 0) {\n                const lastPreprocessor = preprocessorStack.pop();\n                preprocessors.push(lastPreprocessor);\n                if (preprocessorToken === 2 /* PreprocessorTokens.ELSE */) {\n                    preprocessorStack.push(new Preprocessor({\n                        condition: `!(${lastPreprocessor.condition})`,\n                    }));\n                }\n            }\n        }\n    }\n    return {\n        networkFilters,\n        cosmeticFilters,\n        preprocessors: preprocessors.filter((preprocessor) => preprocessor.filterIDs.size > 0),\n    };\n}\nfunction getFilters(list, config) {\n    const { networkFilters, cosmeticFilters, preprocessors } = parseFilters(list, config);\n    const filters = [];\n    return {\n        filters: filters.concat(networkFilters).concat(cosmeticFilters),\n        preprocessors,\n    };\n}\n/**\n * Helper used to return a set of lines as strings where each line is\n * guaranteed to be a valid filter (i.e.: comments, empty lines and\n * un-supported filters are dropped).\n */\nexport function getLinesWithFilters(list, config = new Config()) {\n    // Set config to `debug` so that we keep track of raw lines for each filter\n    return new Set(getFilters(list, new Config(Object.assign({}, config, { debug: true }))).filters.map(({ rawLine }) => rawLine));\n}\n/**\n * Given two versions of the same subscription (e.g.: EasyList) as a string,\n * generate a raw diff (i.e.: a list of filters added and filters removed, in\n * their raw string form).\n */\nexport function generateDiff(prevRevision, newRevision, config = new Config()) {\n    // Set config to `debug` so that we keep track of raw lines for each filter\n    const debugConfig = new Config(Object.assign({}, config, { debug: true }));\n    const prevRevisionData = getFilters(prevRevision, debugConfig);\n    const prevRevisionIds = new Set(prevRevisionData.filters.map((filter) => filter.getId()));\n    const newRevisionData = getFilters(newRevision, debugConfig);\n    const newRevisionIds = new Set(newRevisionData.filters.map((filter) => filter.getId()));\n    // Check which filters were added, based on ID\n    const added = new Set();\n    for (const filter of newRevisionData.filters) {\n        if (!prevRevisionIds.has(filter.getId())) {\n            added.add(filter.rawLine);\n        }\n    }\n    // Check which filters were removed, based on ID\n    const removed = new Set();\n    for (const filter of prevRevisionData.filters) {\n        if (!newRevisionIds.has(filter.getId())) {\n            removed.add(filter.rawLine);\n        }\n    }\n    // Fast exit if we don't want to handle preprocessors.\n    if (!config.loadPreprocessors) {\n        return {\n            added: Array.from(added),\n            removed: Array.from(removed),\n            preprocessors: {},\n        };\n    }\n    const index = new Map();\n    for (const filter of newRevisionData.filters) {\n        index.set(filter.getId(), filter.rawLine);\n    }\n    for (const filter of prevRevisionData.filters) {\n        index.set(filter.getId(), filter.rawLine);\n    }\n    // Create preprocessor diffs\n    const preprocessors = {};\n    // Get the diff of preprocessors\n    for (const preprocessor of prevRevisionData.preprocessors) {\n        // Find the same preprocessor in `newRevisionData`\n        const newPreprocessor = newRevisionData.preprocessors.find((newPreprocessor) => newPreprocessor.condition === preprocessor.condition);\n        // If the preprocessor in the revision is not found, it means the whole block was removed\n        if (!newPreprocessor) {\n            const removedInScope = new Set();\n            // Remove all filters\n            for (const filterID of preprocessor.filterIDs) {\n                removedInScope.add(index.get(filterID));\n            }\n            preprocessors[preprocessor.condition] = {\n                added: [],\n                removed: Array.from(removedInScope),\n            };\n            continue;\n        }\n        // If the preprocessor in the revision is found, it means the block was updated\n        // Create subsets\n        const scope = {\n            added: new Set(),\n            removed: new Set(),\n        };\n        for (const filterID of preprocessor.filterIDs) {\n            if (!newPreprocessor.filterIDs.has(filterID)) {\n                scope.removed.add(index.get(filterID));\n            }\n        }\n        for (const filterID of newPreprocessor.filterIDs) {\n            if (!preprocessor.filterIDs.has(filterID)) {\n                scope.added.add(index.get(filterID));\n            }\n        }\n        preprocessors[preprocessor.condition] = {\n            added: Array.from(scope.added),\n            removed: Array.from(scope.removed),\n        };\n    }\n    // Iterate over only \"added\" preprocessors\n    for (const preprocessor of newRevisionData.preprocessors) {\n        // If the preprocessor in the previous revision was not found, it means the whole block was added\n        if (!preprocessors[preprocessor.condition]) {\n            const addedInScope = new Set();\n            // Remove all filters\n            for (const filterID of preprocessor.filterIDs) {\n                addedInScope.add(index.get(filterID));\n            }\n            preprocessors[preprocessor.condition] = {\n                added: Array.from(addedInScope),\n                removed: [],\n            };\n        }\n    }\n    for (const [condition, { added, removed }] of Object.entries(preprocessors)) {\n        if (added.length === 0 && removed.length === 0) {\n            delete preprocessors[condition];\n        }\n    }\n    return {\n        added: Array.from(added),\n        removed: Array.from(removed),\n        // For the filters under `preprocessors` property, it doesn't mean those are \"filters\".\n        // Those are \"a list of filters affected by preprocessors\" not the \"filters\" itself.\n        // Therefore, they shouldn't be treated as filters.\n        // Instead, we put \"filters\" in `added` and `removed` properties.\n        // This provides backward-compatibility and simplicity.\n        preprocessors,\n    };\n}\n/**\n * Merge several raw diffs into one, taking care of accumulating added and\n * removed filters, even if several diffs add/remove the same ones.\n */\nexport function mergeDiffs(diffs) {\n    const addedCumul = new Set();\n    const removedCumul = new Set();\n    const preprocessorsCumul = {};\n    for (const { added, removed, preprocessors } of diffs) {\n        if (added !== undefined) {\n            for (const str of added) {\n                if (removedCumul.has(str)) {\n                    removedCumul.delete(str);\n                }\n                addedCumul.add(str);\n            }\n        }\n        if (removed !== undefined) {\n            for (const str of removed) {\n                if (addedCumul.has(str)) {\n                    addedCumul.delete(str);\n                }\n                removedCumul.add(str);\n            }\n        }\n        if (!preprocessors) {\n            continue;\n        }\n        for (const [condition, details] of Object.entries(preprocessors)) {\n            if (!preprocessorsCumul[condition]) {\n                preprocessorsCumul[condition] = {\n                    added: details.added !== undefined ? new Set(details.added) : new Set(),\n                    removed: details.removed !== undefined ? new Set(details.removed) : new Set(),\n                };\n            }\n            else {\n                if (details.added !== undefined) {\n                    for (const str of details.added) {\n                        if (preprocessorsCumul[condition].removed.has(str)) {\n                            preprocessorsCumul[condition].removed.delete(str);\n                        }\n                        preprocessorsCumul[condition].added.add(str);\n                    }\n                }\n                if (details.removed !== undefined) {\n                    for (const str of details.removed) {\n                        if (preprocessorsCumul[condition].added.has(str)) {\n                            preprocessorsCumul[condition].added.delete(str);\n                        }\n                        preprocessorsCumul[condition].removed.add(str);\n                    }\n                }\n            }\n        }\n    }\n    return {\n        added: Array.from(addedCumul),\n        removed: Array.from(removedCumul),\n        preprocessors: Object.fromEntries(Object.entries(preprocessorsCumul).map(([condition, details]) => [\n            condition,\n            {\n                added: Array.from(details.added),\n                removed: Array.from(details.removed),\n            },\n        ])),\n    };\n}\n//# sourceMappingURL=lists.js.map"],"names":[],"mappings":"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"}