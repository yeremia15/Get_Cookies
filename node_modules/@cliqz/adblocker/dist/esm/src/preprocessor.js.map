{"version":3,"file":"preprocessor.js","sources":["../../src/src/preprocessor.js"],"sourcesContent":["import { sizeOfUTF8 } from './data-view';\nexport class Env extends Map {\n}\nexport function detectPreprocessor(line) {\n    // Minimum size of a valid condition should be 6 for something like: \"!#if x\" or \"!#else\"\n    if (line.length < 6 ||\n        line.charCodeAt(0) !== 33 /* '!' */ ||\n        line.charCodeAt(1) !== 35 /* '#' */) {\n        return 0 /* PreprocessorTokens.INVALID */;\n    }\n    if (line.startsWith('!#if ')) {\n        return 1 /* PreprocessorTokens.BEGIF */;\n    }\n    if (line.startsWith('!#else')) {\n        return 2 /* PreprocessorTokens.ELSE */;\n    }\n    if (line.startsWith('!#endif')) {\n        return 3 /* PreprocessorTokens.ENDIF */;\n    }\n    return 0 /* PreprocessorTokens.INVALID */;\n}\nconst tokenizerPattern = /(!|&&|\\|\\||\\(|\\)|[a-zA-Z0-9_]+)/g;\nconst identifierPattern = /^[a-zA-Z0-9_]+$/;\nconst tokenize = (expression) => expression.match(tokenizerPattern);\nconst isIdentifier = (expression) => identifierPattern.test(expression);\nconst precedence = {\n    '!': 2,\n    '&&': 1,\n    '||': 0,\n};\nconst isOperator = (token) => Object.prototype.hasOwnProperty.call(precedence, token);\nconst testIdentifier = (identifier, env) => {\n    if (identifier === 'true' && !env.has('true')) {\n        return true;\n    }\n    if (identifier === 'false' && !env.has('false')) {\n        return false;\n    }\n    return !!env.get(identifier);\n};\n/// The parsing is done using the [Shunting yard algorithm](https://en.wikipedia.org/wiki/Shunting_yard_algorithm).\n/// This function takes as input a string expression and an environment Map.\n/// The expression is made of constants (identifiers), logical operators\n/// (&&, ||), negations (!constant) and parentheses.\n///\n/// The environment is a simple Map that associates identifiers to boolean values.\n///\n/// The function should return the result of evaluating the expression using\n/// the values from `environment`. The return value of this function is\n/// either `true` or `false`.\nexport const evaluate = (expression, env) => {\n    if (expression.length === 0) {\n        return false;\n    }\n    if (isIdentifier(expression)) {\n        if (expression[0] === '!') {\n            return !testIdentifier(expression.slice(1), env);\n        }\n        return testIdentifier(expression, env);\n    }\n    const tokens = tokenize(expression);\n    if (!tokens || tokens.length === 0) {\n        return false;\n    }\n    // Exit if an unallowed character found.\n    // Since we're tokenizing via String.prototype.match function,\n    // the total length of matched tokens will be different in case\n    // unallowed characters were injected.\n    // However, we expect all spaces were already removed in prior step.\n    if (expression.length !== tokens.reduce((partialSum, token) => partialSum + token.length, 0)) {\n        return false;\n    }\n    const output = [];\n    const stack = [];\n    for (const token of tokens) {\n        if (token === '(') {\n            stack.push(token);\n        }\n        else if (token === ')') {\n            while (stack.length !== 0 && stack[stack.length - 1] !== '(') {\n                output.push(stack.pop());\n            }\n            // If the opening parenthesis doesn't exist\n            if (stack.length === 0) {\n                return false;\n            }\n            stack.pop();\n        }\n        else if (isOperator(token)) {\n            while (stack.length &&\n                isOperator(stack[stack.length - 1]) &&\n                precedence[token] <= precedence[stack[stack.length - 1]]) {\n                output.push(stack.pop());\n            }\n            stack.push(token);\n        }\n        else {\n            output.push(testIdentifier(token, env));\n        }\n    }\n    // If there is incomplete parenthesis\n    if (stack[0] === '(' || stack[0] === ')') {\n        return false;\n    }\n    while (stack.length !== 0) {\n        output.push(stack.pop());\n    }\n    for (const token of output) {\n        if (token === true || token === false) {\n            stack.push(token);\n        }\n        else if (token === '!') {\n            stack.push(!stack.pop());\n        }\n        else if (isOperator(token)) {\n            const right = stack.pop();\n            const left = stack.pop();\n            if (token === '&&') {\n                stack.push(left && right);\n            }\n            else {\n                stack.push(left || right);\n            }\n        }\n    }\n    return stack[0] === true;\n};\nexport default class Preprocessor {\n    static getCondition(line) {\n        return line.slice(5 /* '!#if '.length */).replace(/\\s/g, '');\n    }\n    static parse(line, filterIDs) {\n        return new this({\n            condition: Preprocessor.getCondition(line),\n            filterIDs,\n        });\n    }\n    static deserialize(view) {\n        const condition = view.getUTF8();\n        const filterIDs = new Set();\n        for (let i = 0, l = view.getUint32(); i < l; i++) {\n            filterIDs.add(view.getUint32());\n        }\n        return new this({\n            condition,\n            filterIDs,\n        });\n    }\n    constructor({ condition, filterIDs = new Set(), }) {\n        this.condition = condition;\n        this.filterIDs = filterIDs;\n    }\n    evaluate(env) {\n        return evaluate(this.condition, env);\n    }\n    serialize(view) {\n        view.pushUTF8(this.condition);\n        view.pushUint32(this.filterIDs.size);\n        for (const filterID of this.filterIDs) {\n            view.pushUint32(filterID);\n        }\n    }\n    getSerializedSize() {\n        let estimatedSize = sizeOfUTF8(this.condition);\n        estimatedSize += (1 + this.filterIDs.size) * 4;\n        return estimatedSize;\n    }\n}\n//# sourceMappingURL=preprocessor.js.map"],"names":[],"mappings":"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"}