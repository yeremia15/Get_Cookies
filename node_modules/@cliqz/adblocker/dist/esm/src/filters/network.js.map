{"version":3,"file":"network.js","sources":["../../../src/src/filters/network.js"],"sourcesContent":["/*!\n * Copyright (c) 2017-present Cliqz GmbH. All rights reserved.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\nimport { Domains } from '../engine/domains';\nimport { sizeOfNetworkCSP, sizeOfNetworkFilter, sizeOfNetworkHostname, sizeOfNetworkRedirect, sizeOfUTF8, sizeOfRawNetwork, } from '../data-view';\nimport { toASCII } from '../punycode';\nimport { NORMALIZED_TYPE_TOKEN } from '../request';\nimport { TOKENS_BUFFER } from '../tokens-buffer';\nimport { bitCount, clearBit, fastHash, fastStartsWith, fastStartsWithFrom, getBit, hasUnicode, isAlpha, isDigit, setBit, tokenizeInPlace, tokenizeRegexInPlace, tokenizeWithWildcardsInPlace, HASH_SEED, HASH_INTERNAL_MULT, } from '../utils';\nconst HTTP_HASH = fastHash('http');\nconst HTTPS_HASH = fastHash('https');\nfunction isAllowedHostname(ch) {\n    return (isDigit(ch) || isAlpha(ch) || ch === 95 /* '_' */ || ch === 45 /* '-' */ || ch === 46 /* '.' */);\n}\nconst NORMALIZE_OPTIONS = {\n    'document': 'doc',\n    'first-party': '1p',\n    'generichide': 'ghide',\n    'object-subrequest': 'object',\n    'stylesheet': 'css',\n    'subdocument': 'frame',\n    'third-party': '3p',\n    'xmlhttprequest': 'xhr',\n    '~first-party': '3p',\n    '~third-party': '1p',\n    'all': '',\n};\n/**\n * Normalize a raw filter by replacing options with their canonical forms. For\n * example `||foo.com$stylesheet,first-party,xhr` would be normalized to\n * `||foo.com$css,1p,xhr`.\n */\nconst REGEX = /all|~third-party|~first-party|third-party|first-party|object-subrequest|stylesheet|subdocument|xmlhttprequest|document|generichide/g;\nexport function normalizeRawFilterOptions(rawFilter) {\n    rawFilter = rawFilter.toLowerCase();\n    let indexOfOptions = rawFilter.lastIndexOf('$');\n    if (indexOfOptions === -1) {\n        return rawFilter;\n    }\n    // Remove trailing '*' if possible\n    if (indexOfOptions !== 0 && rawFilter[indexOfOptions - 1] === '*') {\n        rawFilter = rawFilter.slice(0, indexOfOptions - 1) + rawFilter.slice(indexOfOptions);\n        indexOfOptions -= 1;\n    }\n    // Normalize options\n    const options = rawFilter.slice(indexOfOptions + 1);\n    const normalizedOptions = options\n        .replace(REGEX, (option) => {\n        const normalized = NORMALIZE_OPTIONS[option];\n        if (normalized === undefined) {\n            return option;\n        }\n        return normalized;\n    })\n        .split(',')\n        .sort()\n        .join(',');\n    if (options === normalizedOptions) {\n        return rawFilter;\n    }\n    if (normalizedOptions === '') {\n        return rawFilter.slice(0, indexOfOptions);\n    }\n    return `${rawFilter.slice(0, indexOfOptions)}$${normalizedOptions}`;\n}\n/**\n * Mask used when a network filter can be applied on any content type.\n */\nconst FROM_ANY = 1 /* NETWORK_FILTER_MASK.fromDocument */ |\n    2 /* NETWORK_FILTER_MASK.fromFont */ |\n    16 /* NETWORK_FILTER_MASK.fromImage */ |\n    32 /* NETWORK_FILTER_MASK.fromMedia */ |\n    64 /* NETWORK_FILTER_MASK.fromObject */ |\n    128 /* NETWORK_FILTER_MASK.fromOther */ |\n    256 /* NETWORK_FILTER_MASK.fromPing */ |\n    512 /* NETWORK_FILTER_MASK.fromScript */ |\n    1024 /* NETWORK_FILTER_MASK.fromStylesheet */ |\n    2048 /* NETWORK_FILTER_MASK.fromSubdocument */ |\n    4096 /* NETWORK_FILTER_MASK.fromWebsocket */ |\n    8192 /* NETWORK_FILTER_MASK.fromXmlHttpRequest */;\n/**\n * Map content type value to mask the corresponding mask.\n * ref: https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIContentPolicy\n */\nconst REQUEST_TYPE_TO_MASK = {\n    beacon: 256 /* NETWORK_FILTER_MASK.fromPing */, // fromOther?\n    document: 1 /* NETWORK_FILTER_MASK.fromDocument */,\n    cspviolationreport: 128 /* NETWORK_FILTER_MASK.fromOther */,\n    fetch: 8192 /* NETWORK_FILTER_MASK.fromXmlHttpRequest */,\n    font: 2 /* NETWORK_FILTER_MASK.fromFont */,\n    image: 16 /* NETWORK_FILTER_MASK.fromImage */,\n    imageset: 16 /* NETWORK_FILTER_MASK.fromImage */,\n    mainFrame: 1 /* NETWORK_FILTER_MASK.fromDocument */,\n    main_frame: 1 /* NETWORK_FILTER_MASK.fromDocument */,\n    media: 32 /* NETWORK_FILTER_MASK.fromMedia */,\n    object: 64 /* NETWORK_FILTER_MASK.fromObject */,\n    object_subrequest: 64 /* NETWORK_FILTER_MASK.fromObject */,\n    ping: 256 /* NETWORK_FILTER_MASK.fromPing */, // fromOther?\n    script: 512 /* NETWORK_FILTER_MASK.fromScript */,\n    stylesheet: 1024 /* NETWORK_FILTER_MASK.fromStylesheet */,\n    subFrame: 2048 /* NETWORK_FILTER_MASK.fromSubdocument */,\n    sub_frame: 2048 /* NETWORK_FILTER_MASK.fromSubdocument */,\n    webSocket: 4096 /* NETWORK_FILTER_MASK.fromWebsocket */,\n    websocket: 4096 /* NETWORK_FILTER_MASK.fromWebsocket */,\n    xhr: 8192 /* NETWORK_FILTER_MASK.fromXmlHttpRequest */,\n    xmlhttprequest: 8192 /* NETWORK_FILTER_MASK.fromXmlHttpRequest */,\n    // Other\n    cspReport: 128 /* NETWORK_FILTER_MASK.fromOther */,\n    csp_report: 128 /* NETWORK_FILTER_MASK.fromOther */,\n    eventsource: 128 /* NETWORK_FILTER_MASK.fromOther */,\n    manifest: 128 /* NETWORK_FILTER_MASK.fromOther */,\n    other: 128 /* NETWORK_FILTER_MASK.fromOther */,\n    prefetch: 128 /* NETWORK_FILTER_MASK.fromOther */,\n    preflight: 128 /* NETWORK_FILTER_MASK.fromOther */,\n    signedexchange: 128 /* NETWORK_FILTER_MASK.fromOther */,\n    speculative: 128 /* NETWORK_FILTER_MASK.fromOther */,\n    texttrack: 128 /* NETWORK_FILTER_MASK.fromOther */,\n    web_manifest: 128 /* NETWORK_FILTER_MASK.fromOther */,\n    xml_dtd: 128 /* NETWORK_FILTER_MASK.fromOther */,\n    xslt: 128 /* NETWORK_FILTER_MASK.fromOther */,\n};\nfunction getListOfRequestTypesNegated(filter) {\n    const types = [];\n    if (filter.fromDocument() === false) {\n        types.push('document');\n    }\n    if (filter.fromImage() === false) {\n        types.push('image');\n    }\n    if (filter.fromMedia() === false) {\n        types.push('media');\n    }\n    if (filter.fromObject() === false) {\n        types.push('object');\n    }\n    if (filter.fromOther() === false) {\n        types.push('other');\n    }\n    if (filter.fromPing() === false) {\n        types.push('ping');\n    }\n    if (filter.fromScript() === false) {\n        types.push('script');\n    }\n    if (filter.fromStylesheet() === false) {\n        types.push('stylesheet');\n    }\n    if (filter.fromSubdocument() === false) {\n        types.push('sub_frame');\n    }\n    if (filter.fromWebsocket() === false) {\n        types.push('websocket');\n    }\n    if (filter.fromXmlHttpRequest() === false) {\n        types.push('xhr');\n    }\n    if (filter.fromFont() === false) {\n        types.push('font');\n    }\n    return types;\n}\nfunction getListOfRequestTypes(filter) {\n    const types = [];\n    if (filter.fromDocument()) {\n        types.push('document');\n    }\n    if (filter.fromImage()) {\n        types.push('image');\n    }\n    if (filter.fromMedia()) {\n        types.push('media');\n    }\n    if (filter.fromObject()) {\n        types.push('object');\n    }\n    if (filter.fromOther()) {\n        types.push('other');\n    }\n    if (filter.fromPing()) {\n        types.push('ping');\n    }\n    if (filter.fromScript()) {\n        types.push('script');\n    }\n    if (filter.fromStylesheet()) {\n        types.push('stylesheet');\n    }\n    if (filter.fromSubdocument()) {\n        types.push('sub_frame');\n    }\n    if (filter.fromWebsocket()) {\n        types.push('websocket');\n    }\n    if (filter.fromXmlHttpRequest()) {\n        types.push('xhr');\n    }\n    if (filter.fromFont()) {\n        types.push('font');\n    }\n    return types;\n}\nfunction computeFilterId(csp, mask, filter, hostname, domains, denyallow, redirect) {\n    let hash = (HASH_SEED * HASH_INTERNAL_MULT) ^ mask;\n    if (csp !== undefined) {\n        for (let i = 0; i < csp.length; i += 1) {\n            hash = (hash * HASH_INTERNAL_MULT) ^ csp.charCodeAt(i);\n        }\n    }\n    if (domains !== undefined) {\n        hash = domains.updateId(hash);\n    }\n    if (denyallow !== undefined) {\n        hash = denyallow.updateId(hash);\n    }\n    if (filter !== undefined) {\n        for (let i = 0; i < filter.length; i += 1) {\n            hash = (hash * HASH_INTERNAL_MULT) ^ filter.charCodeAt(i);\n        }\n    }\n    if (hostname !== undefined) {\n        for (let i = 0; i < hostname.length; i += 1) {\n            hash = (hash * HASH_INTERNAL_MULT) ^ hostname.charCodeAt(i);\n        }\n    }\n    if (redirect !== undefined) {\n        for (let i = 0; i < redirect.length; i += 1) {\n            hash = (hash * HASH_INTERNAL_MULT) ^ redirect.charCodeAt(i);\n        }\n    }\n    return hash >>> 0;\n}\n/**\n * Compiles a filter pattern to a regex. This is only performed *lazily* for\n * filters containing at least a * or ^ symbol. Because Regexes are expansive,\n * we try to convert some patterns to plain filters.\n */\nfunction compileRegex(filter, isLeftAnchor, isRightAnchor, isFullRegex) {\n    if (isFullRegex === true) {\n        return new RegExp(filter.slice(1, filter.length - 1), 'i');\n    }\n    // Escape special regex characters: |.$+?{}()[]\\\n    filter = filter.replace(/([|.$+?{}()[\\]\\\\])/g, '\\\\$1');\n    // * can match anything\n    filter = filter.replace(/\\*/g, '.*');\n    // ^ can match any separator or the end of the pattern\n    filter = filter.replace(/\\^/g, '(?:[^\\\\w\\\\d_.%-]|$)');\n    // Should match end of url\n    if (isRightAnchor) {\n        filter = `${filter}$`;\n    }\n    if (isLeftAnchor) {\n        filter = `^${filter}`;\n    }\n    return new RegExp(filter);\n}\nexport function findLastIndexOfUnescapedCharacter(text, character) {\n    let lastIndex = text.lastIndexOf(character);\n    if (lastIndex === -1) {\n        return -1;\n    }\n    while (lastIndex > 0 && text.charCodeAt(lastIndex - 1) === 92 /* '\\\\' */) {\n        lastIndex = text.lastIndexOf(character, lastIndex - 1);\n    }\n    return lastIndex;\n}\nconst MATCH_ALL = new RegExp('');\nexport default class NetworkFilter {\n    static parse(line, debug = false) {\n        // Represent options as a bitmask\n        let mask = 32768 /* NETWORK_FILTER_MASK.thirdParty */ |\n            16384 /* NETWORK_FILTER_MASK.firstParty */ |\n            8 /* NETWORK_FILTER_MASK.fromHttps */ |\n            4 /* NETWORK_FILTER_MASK.fromHttp */;\n        // Temporary masks for positive (e.g.: $script) and negative (e.g.: $~script)\n        // content type options.\n        let cptMaskPositive = 0;\n        let cptMaskNegative = FROM_ANY;\n        let hostname;\n        let domains;\n        let denyallow;\n        let redirect;\n        let csp;\n        // Start parsing\n        let filterIndexStart = 0;\n        let filterIndexEnd = line.length;\n        // @@filter == Exception\n        if (line.charCodeAt(0) === 64 /* '@' */ && line.charCodeAt(1) === 64 /* '@' */) {\n            filterIndexStart += 2;\n            mask = setBit(mask, 134217728 /* NETWORK_FILTER_MASK.isException */);\n        }\n        // filter$options == Options\n        // ^     ^\n        // |     |\n        // |     optionsIndex\n        // filterIndexStart\n        const optionsIndex = findLastIndexOfUnescapedCharacter(line, '$');\n        if (optionsIndex !== -1 && line.charCodeAt(optionsIndex + 1) !== 47 /* '/' */) {\n            // Parse options and set flags\n            filterIndexEnd = optionsIndex;\n            // --------------------------------------------------------------------- //\n            // parseOptions\n            // --------------------------------------------------------------------- //\n            for (const rawOption of line.slice(optionsIndex + 1).split(',')) {\n                const negation = rawOption.charCodeAt(0) === 126; /* '~' */\n                let option = negation === true ? rawOption.slice(1) : rawOption;\n                // Check for options: option=value1|value2\n                let optionValue = '';\n                const indexOfEqual = option.indexOf('=');\n                if (indexOfEqual !== -1) {\n                    optionValue = option.slice(indexOfEqual + 1);\n                    option = option.slice(0, indexOfEqual);\n                }\n                switch (option) {\n                    case 'denyallow': {\n                        denyallow = Domains.parse(optionValue.split('|'), debug);\n                        break;\n                    }\n                    case 'domain':\n                    case 'from': {\n                        // domain list starting or ending with '|' is invalid\n                        if (optionValue.charCodeAt(0) === 124 /* '|' */ ||\n                            optionValue.charCodeAt(optionValue.length - 1) === 124 /* '|' */) {\n                            return null;\n                        }\n                        domains = Domains.parse(optionValue.split('|'), debug);\n                        break;\n                    }\n                    case 'badfilter':\n                        mask = setBit(mask, 131072 /* NETWORK_FILTER_MASK.isBadFilter */);\n                        break;\n                    case 'important':\n                        // Note: `negation` should always be `false` here.\n                        if (negation) {\n                            return null;\n                        }\n                        mask = setBit(mask, 1048576 /* NETWORK_FILTER_MASK.isImportant */);\n                        break;\n                    case 'match-case':\n                        // Note: `negation` should always be `false` here.\n                        if (negation) {\n                            return null;\n                        }\n                        // We currently consider all filters to be case-insensitive.\n                        break;\n                    case '3p':\n                    case 'third-party':\n                        if (negation) {\n                            // ~third-party means we should clear the flag\n                            mask = clearBit(mask, 32768 /* NETWORK_FILTER_MASK.thirdParty */);\n                        }\n                        else {\n                            // third-party means ~first-party\n                            mask = clearBit(mask, 16384 /* NETWORK_FILTER_MASK.firstParty */);\n                        }\n                        break;\n                    case '1p':\n                    case 'first-party':\n                        if (negation) {\n                            // ~first-party means we should clear the flag\n                            mask = clearBit(mask, 16384 /* NETWORK_FILTER_MASK.firstParty */);\n                        }\n                        else {\n                            // first-party means ~third-party\n                            mask = clearBit(mask, 32768 /* NETWORK_FILTER_MASK.thirdParty */);\n                        }\n                        break;\n                    case 'redirect-rule':\n                    case 'redirect':\n                        // Negation of redirection doesn't make sense\n                        if (negation) {\n                            return null;\n                        }\n                        // Ignore this filter if no redirection resource is specified\n                        if (optionValue.length === 0) {\n                            return null;\n                        }\n                        if (option === 'redirect-rule') {\n                            mask = setBit(mask, 536870912 /* NETWORK_FILTER_MASK.isRedirectRule */);\n                        }\n                        redirect = optionValue;\n                        break;\n                    case 'csp':\n                        if (negation) {\n                            return null;\n                        }\n                        mask = setBit(mask, 262144 /* NETWORK_FILTER_MASK.isCSP */);\n                        if (optionValue.length > 0) {\n                            csp = optionValue;\n                        }\n                        break;\n                    case 'ehide':\n                    case 'elemhide':\n                        if (negation) {\n                            return null;\n                        }\n                        mask = setBit(mask, 524288 /* NETWORK_FILTER_MASK.isGenericHide */);\n                        mask = setBit(mask, 2097152 /* NETWORK_FILTER_MASK.isSpecificHide */);\n                        break;\n                    case 'shide':\n                    case 'specifichide':\n                        if (negation) {\n                            return null;\n                        }\n                        mask = setBit(mask, 2097152 /* NETWORK_FILTER_MASK.isSpecificHide */);\n                        break;\n                    case 'ghide':\n                    case 'generichide':\n                        if (negation) {\n                            return null;\n                        }\n                        mask = setBit(mask, 524288 /* NETWORK_FILTER_MASK.isGenericHide */);\n                        break;\n                    case 'inline-script':\n                        if (negation) {\n                            return null;\n                        }\n                        mask = setBit(mask, 262144 /* NETWORK_FILTER_MASK.isCSP */);\n                        csp =\n                            \"script-src 'self' 'unsafe-eval' http: https: data: blob: mediastream: filesystem:\";\n                        break;\n                    case 'inline-font':\n                        if (negation) {\n                            return null;\n                        }\n                        mask = setBit(mask, 262144 /* NETWORK_FILTER_MASK.isCSP */);\n                        csp =\n                            \"font-src 'self' 'unsafe-eval' http: https: data: blob: mediastream: filesystem:\";\n                        break;\n                    default: {\n                        // Handle content type options separatly\n                        let optionMask = 0;\n                        switch (option) {\n                            case 'all':\n                                if (negation) {\n                                    return null;\n                                }\n                                // NOTE: Currently a filter cannot be both blocking and CSP, so\n                                // we will have to create multiple filters to keep the semantics\n                                // of 'all'.\n                                // mask = setBit(mask, NETWORK_FILTER_MASK.isCSP);\n                                // csp = [\n                                //   \"script-src 'self' 'unsafe-eval' http: https: data: blob: mediastream: filesystem:\",\n                                //   \"font-src 'self' 'unsafe-eval' http: https: data: blob: mediastream: filesystem:\",\n                                // ].join('; ');\n                                break;\n                            case 'image':\n                                optionMask = 16 /* NETWORK_FILTER_MASK.fromImage */;\n                                break;\n                            case 'media':\n                                optionMask = 32 /* NETWORK_FILTER_MASK.fromMedia */;\n                                break;\n                            case 'object':\n                            case 'object-subrequest':\n                                optionMask = 64 /* NETWORK_FILTER_MASK.fromObject */;\n                                break;\n                            case 'other':\n                                optionMask = 128 /* NETWORK_FILTER_MASK.fromOther */;\n                                break;\n                            case 'ping':\n                            case 'beacon':\n                                optionMask = 256 /* NETWORK_FILTER_MASK.fromPing */;\n                                break;\n                            case 'script':\n                                optionMask = 512 /* NETWORK_FILTER_MASK.fromScript */;\n                                break;\n                            case 'css':\n                            case 'stylesheet':\n                                optionMask = 1024 /* NETWORK_FILTER_MASK.fromStylesheet */;\n                                break;\n                            case 'frame':\n                            case 'subdocument':\n                                optionMask = 2048 /* NETWORK_FILTER_MASK.fromSubdocument */;\n                                break;\n                            case 'xhr':\n                            case 'xmlhttprequest':\n                                optionMask = 8192 /* NETWORK_FILTER_MASK.fromXmlHttpRequest */;\n                                break;\n                            case 'websocket':\n                                optionMask = 4096 /* NETWORK_FILTER_MASK.fromWebsocket */;\n                                break;\n                            case 'font':\n                                optionMask = 2 /* NETWORK_FILTER_MASK.fromFont */;\n                                break;\n                            case 'doc':\n                            case 'document':\n                                optionMask = 1 /* NETWORK_FILTER_MASK.fromDocument */;\n                                break;\n                            default:\n                                // Disable this filter if we don't support all the options\n                                return null;\n                        }\n                        // We got a valid cpt option, update mask\n                        if (negation) {\n                            cptMaskNegative = clearBit(cptMaskNegative, optionMask);\n                        }\n                        else {\n                            cptMaskPositive = setBit(cptMaskPositive, optionMask);\n                        }\n                        break;\n                    }\n                }\n            }\n            // End of option parsing\n            // --------------------------------------------------------------------- //\n        }\n        if (cptMaskPositive === 0) {\n            mask |= cptMaskNegative;\n        }\n        else if (cptMaskNegative === FROM_ANY) {\n            mask |= cptMaskPositive;\n        }\n        else {\n            mask |= cptMaskPositive & cptMaskNegative;\n        }\n        // Identify kind of pattern\n        let filter;\n        // Detect Regexps (i.e.: /pattern/)\n        if (filterIndexEnd - filterIndexStart >= 2 &&\n            line.charCodeAt(filterIndexStart) === 47 /* '/' */ &&\n            line.charCodeAt(filterIndexEnd - 1) === 47 /* '/' */) {\n            // Some extra ideas which could be applied to RegExp filters:\n            // * convert rules without any special RegExp syntax to plain patterns\n            // * remove extra `isFullRegex` flag since `isRegex` might be enough\n            // * apply some optimizations on the fly: /^https?:\\\\/\\\\/rest => isHttp + isHttps + rest\n            filter = line.slice(filterIndexStart, filterIndexEnd);\n            // Validate RegExp to make sure this rule is fine\n            try {\n                compileRegex(filter, false /* isLeftAnchor */, false /* isRightAnchor */, true /* isFullRegex */);\n            }\n            catch (ex) {\n                return null; // invalid RegExp\n            }\n            mask = setBit(mask, 4194304 /* NETWORK_FILTER_MASK.isFullRegex */);\n        }\n        else {\n            // Deal with hostname pattern\n            if (filterIndexEnd > 0 && line.charCodeAt(filterIndexEnd - 1) === 124 /* '|' */) {\n                mask = setBit(mask, 67108864 /* NETWORK_FILTER_MASK.isRightAnchor */);\n                filterIndexEnd -= 1;\n            }\n            if (filterIndexStart < filterIndexEnd &&\n                line.charCodeAt(filterIndexStart) === 124 /* '|' */) {\n                if (filterIndexStart < filterIndexEnd - 1 &&\n                    line.charCodeAt(filterIndexStart + 1) === 124 /* '|' */) {\n                    mask = setBit(mask, 268435456 /* NETWORK_FILTER_MASK.isHostnameAnchor */);\n                    filterIndexStart += 2;\n                }\n                else {\n                    mask = setBit(mask, 33554432 /* NETWORK_FILTER_MASK.isLeftAnchor */);\n                    filterIndexStart += 1;\n                }\n            }\n            // const isRegex = checkIsRegex(line, filterIndexStart, filterIndexEnd);\n            // mask = setNetworkMask(mask, NETWORK_FILTER_MASK.isRegex, isRegex);\n            if (getBit(mask, 268435456 /* NETWORK_FILTER_MASK.isHostnameAnchor */)) {\n                // Split at the first character which is not allowed in a hostname\n                let firstSeparator = filterIndexStart;\n                while (firstSeparator < filterIndexEnd &&\n                    isAllowedHostname(line.charCodeAt(firstSeparator)) === true) {\n                    firstSeparator += 1;\n                }\n                // No separator found so hostname has full length\n                if (firstSeparator === filterIndexEnd) {\n                    hostname = line.slice(filterIndexStart, filterIndexEnd);\n                    filterIndexStart = filterIndexEnd;\n                    // mask = setBit(mask, NETWORK_FILTER_MASK.isLeftAnchor);\n                }\n                else {\n                    // Found a separator\n                    hostname = line.slice(filterIndexStart, firstSeparator);\n                    filterIndexStart = firstSeparator;\n                    const separatorCode = line.charCodeAt(firstSeparator);\n                    if (separatorCode === 94 /* '^' */) {\n                        // If the only symbol remaining for the selector is '^' then ignore it\n                        // but set the filter as right anchored since there should not be any\n                        // other label on the right\n                        if (filterIndexEnd - filterIndexStart === 1) {\n                            filterIndexStart = filterIndexEnd;\n                            mask = setBit(mask, 67108864 /* NETWORK_FILTER_MASK.isRightAnchor */);\n                        }\n                        else {\n                            mask = setBit(mask, 8388608 /* NETWORK_FILTER_MASK.isRegex */);\n                            mask = setBit(mask, 33554432 /* NETWORK_FILTER_MASK.isLeftAnchor */);\n                        }\n                    }\n                    else if (separatorCode === 42 /* '*' */) {\n                        mask = setBit(mask, 8388608 /* NETWORK_FILTER_MASK.isRegex */);\n                        // mask = setBit(mask, NETWORK_FILTER_MASK.isLeftAnchor);\n                    }\n                    else {\n                        mask = setBit(mask, 33554432 /* NETWORK_FILTER_MASK.isLeftAnchor */);\n                    }\n                }\n            }\n            // Remove trailing '*'\n            if (filterIndexEnd - filterIndexStart > 0 &&\n                line.charCodeAt(filterIndexEnd - 1) === 42 /* '*' */) {\n                filterIndexEnd -= 1;\n            }\n            // Remove leading '*' if the filter is not hostname anchored.\n            if (getBit(mask, 268435456 /* NETWORK_FILTER_MASK.isHostnameAnchor */) === false &&\n                filterIndexEnd - filterIndexStart > 0 &&\n                line.charCodeAt(filterIndexStart) === 42 /* '*' */) {\n                mask = clearBit(mask, 33554432 /* NETWORK_FILTER_MASK.isLeftAnchor */);\n                filterIndexStart += 1;\n            }\n            // Transform filters on protocol (http, https, ws)\n            if (getBit(mask, 33554432 /* NETWORK_FILTER_MASK.isLeftAnchor */)) {\n                if (filterIndexEnd - filterIndexStart === 5 &&\n                    fastStartsWithFrom(line, 'ws://', filterIndexStart)) {\n                    mask = setBit(mask, 4096 /* NETWORK_FILTER_MASK.fromWebsocket */);\n                    mask = clearBit(mask, 33554432 /* NETWORK_FILTER_MASK.isLeftAnchor */);\n                    mask = clearBit(mask, 4 /* NETWORK_FILTER_MASK.fromHttp */);\n                    mask = clearBit(mask, 8 /* NETWORK_FILTER_MASK.fromHttps */);\n                    filterIndexStart = filterIndexEnd;\n                }\n                else if (filterIndexEnd - filterIndexStart === 7 &&\n                    fastStartsWithFrom(line, 'http://', filterIndexStart)) {\n                    mask = setBit(mask, 4 /* NETWORK_FILTER_MASK.fromHttp */);\n                    mask = clearBit(mask, 8 /* NETWORK_FILTER_MASK.fromHttps */);\n                    mask = clearBit(mask, 33554432 /* NETWORK_FILTER_MASK.isLeftAnchor */);\n                    filterIndexStart = filterIndexEnd;\n                }\n                else if (filterIndexEnd - filterIndexStart === 8 &&\n                    fastStartsWithFrom(line, 'https://', filterIndexStart)) {\n                    mask = setBit(mask, 8 /* NETWORK_FILTER_MASK.fromHttps */);\n                    mask = clearBit(mask, 4 /* NETWORK_FILTER_MASK.fromHttp */);\n                    mask = clearBit(mask, 33554432 /* NETWORK_FILTER_MASK.isLeftAnchor */);\n                    filterIndexStart = filterIndexEnd;\n                }\n                else if (filterIndexEnd - filterIndexStart === 8 &&\n                    fastStartsWithFrom(line, 'http*://', filterIndexStart)) {\n                    mask = setBit(mask, 8 /* NETWORK_FILTER_MASK.fromHttps */);\n                    mask = setBit(mask, 4 /* NETWORK_FILTER_MASK.fromHttp */);\n                    mask = clearBit(mask, 33554432 /* NETWORK_FILTER_MASK.isLeftAnchor */);\n                    filterIndexStart = filterIndexEnd;\n                }\n            }\n            if (filterIndexEnd - filterIndexStart > 0) {\n                filter = line.slice(filterIndexStart, filterIndexEnd).toLowerCase();\n                mask = setNetworkMask(mask, 16777216 /* NETWORK_FILTER_MASK.isUnicode */, hasUnicode(filter));\n                if (getBit(mask, 8388608 /* NETWORK_FILTER_MASK.isRegex */) === false) {\n                    mask = setNetworkMask(mask, 8388608 /* NETWORK_FILTER_MASK.isRegex */, checkIsRegex(filter, 0, filter.length));\n                }\n            }\n            // TODO\n            // - ignore hostname anchor is not hostname provided\n            if (hostname !== undefined) {\n                hostname = hostname.toLowerCase();\n                if (hasUnicode(hostname)) {\n                    mask = setNetworkMask(mask, 16777216 /* NETWORK_FILTER_MASK.isUnicode */, true);\n                    hostname = toASCII(hostname);\n                }\n            }\n        }\n        return new NetworkFilter({\n            csp,\n            filter,\n            hostname,\n            mask,\n            domains,\n            denyallow,\n            rawLine: debug === true ? line : undefined,\n            redirect,\n            regex: undefined,\n        });\n    }\n    /**\n     * Deserialize network filters. The code accessing the buffer should be\n     * symetrical to the one in `serializeNetworkFilter`.\n     */\n    static deserialize(buffer) {\n        const mask = buffer.getUint32();\n        const optionalParts = buffer.getUint8();\n        const isUnicode = getBit(mask, 16777216 /* NETWORK_FILTER_MASK.isUnicode */);\n        // The order of these statements is important. Since `buffer.getX()` will\n        // internally increment the position of next byte to read, they need to be\n        // retrieved in the exact same order they were serialized (check\n        // `serializeNetworkFilter`).\n        return new NetworkFilter({\n            // Mandatory field\n            mask,\n            // Optional parts\n            csp: (optionalParts & 1) === 1 ? buffer.getNetworkCSP() : undefined,\n            filter: (optionalParts & 2) === 2\n                ? isUnicode\n                    ? buffer.getUTF8()\n                    : buffer.getNetworkFilter()\n                : undefined,\n            hostname: (optionalParts & 4) === 4 ? buffer.getNetworkHostname() : undefined,\n            domains: (optionalParts & 8) === 8 ? Domains.deserialize(buffer) : undefined,\n            rawLine: (optionalParts & 16) === 16 ? buffer.getRawNetwork() : undefined,\n            redirect: (optionalParts & 32) === 32 ? buffer.getNetworkRedirect() : undefined,\n            denyallow: (optionalParts & 64) === 64 ? Domains.deserialize(buffer) : undefined,\n            regex: undefined,\n        });\n    }\n    constructor({ csp, filter, hostname, mask, domains, denyallow, rawLine, redirect, regex, }) {\n        this.csp = csp;\n        this.filter = filter;\n        this.hostname = hostname;\n        this.mask = mask;\n        this.domains = domains;\n        this.denyallow = denyallow;\n        this.redirect = redirect;\n        this.rawLine = rawLine;\n        this.id = undefined;\n        this.regex = regex;\n    }\n    isCosmeticFilter() {\n        return false;\n    }\n    isNetworkFilter() {\n        return true;\n    }\n    match(request) {\n        return checkOptions(this, request) && checkPattern(this, request);\n    }\n    /**\n     * To allow for a more compact representation of network filters, the\n     * representation is composed of a mandatory header, and some optional\n     *\n     * Header:\n     * =======\n     *\n     *  | opt | mask\n     *     8     32\n     *\n     * For an empty filter having no pattern, hostname, the minimum size is: 42 bits.\n     *\n     * Then for each optional part (filter, hostname optDomains, optNotDomains,\n     * redirect), it takes 16 bits for the length of the string + the length of the\n     * string in bytes.\n     *\n     * The optional parts are written in order of there number of occurrence in the\n     * filter list used by the adblocker. The most common being `hostname`, then\n     * `filter`, `optDomains`, `optNotDomains`, `redirect`.\n     *\n     * Example:\n     * ========\n     *\n     * @@||cliqz.com would result in a serialized version:\n     *\n     * | 1 | mask | 9 | c | l | i | q | z | . | c | o | m  (16 bytes)\n     *\n     * In this case, the serialized version is actually bigger than the original\n     * filter, but faster to deserialize. In the future, we could optimize the\n     * representation to compact small filters better.\n     *\n     * Ideas:\n     *  * variable length encoding for the mask (if not option, take max 1 byte).\n     *  * first byte could contain the mask as well if small enough.\n     *  * when packing ascii string, store several of them in each byte.\n     */\n    serialize(buffer) {\n        buffer.pushUint32(this.mask);\n        const index = buffer.getPos();\n        buffer.pushUint8(0);\n        // This bit-mask indicates which optional parts of the filter were serialized.\n        let optionalParts = 0;\n        if (this.csp !== undefined) {\n            optionalParts |= 1;\n            buffer.pushNetworkCSP(this.csp);\n        }\n        if (this.filter !== undefined) {\n            optionalParts |= 2;\n            if (this.isUnicode()) {\n                buffer.pushUTF8(this.filter);\n            }\n            else {\n                buffer.pushNetworkFilter(this.filter);\n            }\n        }\n        if (this.hostname !== undefined) {\n            optionalParts |= 4;\n            buffer.pushNetworkHostname(this.hostname);\n        }\n        if (this.domains !== undefined) {\n            optionalParts |= 8;\n            this.domains.serialize(buffer);\n        }\n        if (this.rawLine !== undefined) {\n            optionalParts |= 16;\n            buffer.pushRawNetwork(this.rawLine);\n        }\n        if (this.redirect !== undefined) {\n            optionalParts |= 32;\n            buffer.pushNetworkRedirect(this.redirect);\n        }\n        if (this.denyallow !== undefined) {\n            optionalParts |= 64;\n            this.denyallow.serialize(buffer);\n        }\n        buffer.setByte(index, optionalParts);\n    }\n    getSerializedSize(compression) {\n        let estimate = 4 + 1; // mask = 4 bytes // optional parts = 1 byte\n        if (this.csp !== undefined) {\n            estimate += sizeOfNetworkCSP(this.csp, compression);\n        }\n        if (this.filter !== undefined) {\n            if (this.isUnicode() === true) {\n                estimate += sizeOfUTF8(this.filter);\n            }\n            else {\n                estimate += sizeOfNetworkFilter(this.filter, compression);\n            }\n        }\n        if (this.hostname !== undefined) {\n            estimate += sizeOfNetworkHostname(this.hostname, compression);\n        }\n        if (this.domains !== undefined) {\n            estimate += this.domains.getSerializedSize();\n        }\n        if (this.rawLine !== undefined) {\n            estimate += sizeOfRawNetwork(this.rawLine, compression);\n        }\n        if (this.redirect !== undefined) {\n            estimate += sizeOfNetworkRedirect(this.redirect, compression);\n        }\n        if (this.denyallow !== undefined) {\n            estimate += this.denyallow.getSerializedSize();\n        }\n        return estimate;\n    }\n    /**\n     * Tries to recreate the original representation of the filter (adblock\n     * syntax) from the internal representation. If `rawLine` is set (when filters\n     * are parsed in `debug` mode for example), then it is returned directly.\n     * Otherwise, we try to stick as closely as possible to the original form;\n     * there are things which cannot be recovered though, like domains options\n     * of which only hashes are stored.\n     */\n    toString(modifierReplacer) {\n        if (this.rawLine !== undefined) {\n            return this.rawLine;\n        }\n        let filter = '';\n        if (this.isException()) {\n            filter += '@@';\n        }\n        if (this.isHostnameAnchor()) {\n            filter += '||';\n        }\n        else if (this.fromHttp() !== this.fromHttps()) {\n            if (this.fromHttp()) {\n                filter += '|http://';\n            }\n            else {\n                filter += '|https://';\n            }\n        }\n        else if (this.isLeftAnchor()) {\n            filter += '|';\n        }\n        if (this.hasHostname()) {\n            filter += this.getHostname();\n            filter += '^';\n        }\n        if (this.isFullRegex()) {\n            filter += `/${this.getRegex().source}/`;\n        }\n        else if (this.isRegex()) {\n            filter += this.getRegex().source;\n        }\n        else {\n            filter += this.getFilter();\n        }\n        if (this.isRightAnchor() && filter[filter.length - 1] !== '^') {\n            filter += '|';\n        }\n        // Options\n        const options = [];\n        if (this.fromAny() === false) {\n            const numberOfCptOptions = bitCount(this.getCptMask());\n            const numberOfNegatedOptions = bitCount(FROM_ANY) - numberOfCptOptions;\n            if (numberOfNegatedOptions < numberOfCptOptions) {\n                for (const type of getListOfRequestTypesNegated(this)) {\n                    options.push(`~${type}`);\n                }\n            }\n            else {\n                for (const type of getListOfRequestTypes(this)) {\n                    options.push(type);\n                }\n            }\n        }\n        if (this.isImportant()) {\n            options.push('important');\n        }\n        if (this.isRedirectRule()) {\n            options.push(`redirect-rule=${this.getRedirect()}`);\n        }\n        else if (this.isRedirect()) {\n            options.push(`redirect=${this.getRedirect()}`);\n        }\n        if (this.isCSP()) {\n            options.push(`csp=${this.csp}`);\n        }\n        if (this.isElemHide()) {\n            options.push('elemhide');\n        }\n        if (this.isSpecificHide()) {\n            options.push('specifichide');\n        }\n        if (this.isGenericHide()) {\n            options.push('generichide');\n        }\n        if (this.firstParty() !== this.thirdParty()) {\n            if (this.firstParty()) {\n                options.push('1p');\n            }\n            if (this.thirdParty()) {\n                options.push('3p');\n            }\n        }\n        if (this.domains !== undefined) {\n            if (this.domains.parts !== undefined) {\n                options.push(`domain=${this.domains.parts}`);\n            }\n            else {\n                options.push('domain=<hashed>');\n            }\n        }\n        if (this.denyallow !== undefined) {\n            if (this.denyallow.parts !== undefined) {\n                options.push(`denyallow=${this.denyallow.parts}`);\n            }\n            else {\n                options.push('denyallow=<hashed>');\n            }\n        }\n        if (this.isBadFilter()) {\n            options.push('badfilter');\n        }\n        if (options.length > 0) {\n            if (typeof modifierReplacer === 'function') {\n                filter += `$${options.map(modifierReplacer).join(',')}`;\n            }\n            else {\n                filter += `$${options.join(',')}`;\n            }\n        }\n        return filter;\n    }\n    // Public API (Read-Only)\n    getIdWithoutBadFilter() {\n        // This method computes the id ignoring the $badfilter option (which will\n        // correspond to the ID of filters being discarded). This allows us to\n        // eliminate bad filters by comparing IDs, which is more robust and faster\n        // than string comparison.\n        return computeFilterId(this.csp, this.mask & ~131072 /* NETWORK_FILTER_MASK.isBadFilter */, this.filter, this.hostname, this.domains, this.denyallow, this.redirect);\n    }\n    getId() {\n        if (this.id === undefined) {\n            this.id = computeFilterId(this.csp, this.mask, this.filter, this.hostname, this.domains, this.denyallow, this.redirect);\n        }\n        return this.id;\n    }\n    hasFilter() {\n        return this.filter !== undefined;\n    }\n    hasDomains() {\n        return this.domains !== undefined;\n    }\n    getMask() {\n        return this.mask;\n    }\n    getCptMask() {\n        return this.getMask() & FROM_ANY;\n    }\n    isRedirect() {\n        return this.redirect !== undefined;\n    }\n    isRedirectRule() {\n        return getBit(this.mask, 536870912 /* NETWORK_FILTER_MASK.isRedirectRule */);\n    }\n    getRedirect() {\n        return this.redirect || '';\n    }\n    hasHostname() {\n        return this.hostname !== undefined;\n    }\n    getHostname() {\n        return this.hostname || '';\n    }\n    getFilter() {\n        return this.filter || '';\n    }\n    getRegex() {\n        if (this.regex === undefined) {\n            this.regex =\n                this.filter !== undefined && this.isRegex()\n                    ? compileRegex(this.filter, this.isLeftAnchor(), this.isRightAnchor(), this.isFullRegex())\n                    : MATCH_ALL;\n        }\n        return this.regex;\n    }\n    getTokens() {\n        TOKENS_BUFFER.reset();\n        // If there is only one domain and no domain negation, we also use this\n        // domain as a token.\n        if (this.domains !== undefined &&\n            this.domains.hostnames !== undefined &&\n            this.domains.entities === undefined &&\n            this.domains.notHostnames === undefined &&\n            this.domains.notEntities === undefined &&\n            this.domains.hostnames.length === 1) {\n            TOKENS_BUFFER.push(this.domains.hostnames[0]);\n        }\n        // Get tokens from filter\n        if (this.isFullRegex() === false) {\n            if (this.filter !== undefined) {\n                const skipLastToken = !this.isRightAnchor();\n                const skipFirstToken = !this.isLeftAnchor();\n                tokenizeWithWildcardsInPlace(this.filter, skipFirstToken, skipLastToken, TOKENS_BUFFER);\n            }\n            // Append tokens from hostname, if any\n            if (this.hostname !== undefined) {\n                tokenizeInPlace(this.hostname, false, this.filter !== undefined && this.filter.charCodeAt(0) === 42 /* '*' */, TOKENS_BUFFER);\n            }\n        }\n        else if (this.filter !== undefined) {\n            tokenizeRegexInPlace(this.filter, TOKENS_BUFFER);\n        }\n        // If we got no tokens for the filter/hostname part, then we will dispatch\n        // this filter in multiple buckets based on the domains option.\n        if (TOKENS_BUFFER.empty() === true &&\n            this.domains !== undefined &&\n            this.domains.hostnames !== undefined &&\n            this.domains.entities === undefined &&\n            this.domains.notHostnames === undefined &&\n            this.domains.notEntities === undefined) {\n            const result = [];\n            for (const hostname of this.domains.hostnames) {\n                const arr = new Uint32Array(1);\n                arr[0] = hostname;\n                result.push(arr);\n            }\n            return result;\n        }\n        // Add optional token for types\n        if (TOKENS_BUFFER.empty() === true && this.fromAny() === false) {\n            const types = getListOfRequestTypes(this);\n            if (types.length !== 0) {\n                const result = [];\n                for (const type of types) {\n                    const arr = new Uint32Array(1);\n                    arr[0] = NORMALIZED_TYPE_TOKEN[type];\n                    result.push(arr);\n                }\n                return result;\n            }\n        }\n        // Add optional token for protocol\n        if (this.fromHttp() === true && this.fromHttps() === false) {\n            TOKENS_BUFFER.push(HTTP_HASH);\n        }\n        else if (this.fromHttps() === true && this.fromHttp() === false) {\n            TOKENS_BUFFER.push(HTTPS_HASH);\n        }\n        return [TOKENS_BUFFER.slice()];\n    }\n    /**\n     * Check if this filter should apply to a request with this content type.\n     */\n    isCptAllowed(cpt) {\n        const mask = REQUEST_TYPE_TO_MASK[cpt];\n        if (mask !== undefined) {\n            return getBit(this.mask, mask);\n        }\n        // If content type is not supported (or not specified), we return `true`\n        // only if the filter does not specify any resource type.\n        return this.fromAny();\n    }\n    isException() {\n        return getBit(this.mask, 134217728 /* NETWORK_FILTER_MASK.isException */);\n    }\n    isHostnameAnchor() {\n        return getBit(this.mask, 268435456 /* NETWORK_FILTER_MASK.isHostnameAnchor */);\n    }\n    isRightAnchor() {\n        return getBit(this.mask, 67108864 /* NETWORK_FILTER_MASK.isRightAnchor */);\n    }\n    isLeftAnchor() {\n        return getBit(this.mask, 33554432 /* NETWORK_FILTER_MASK.isLeftAnchor */);\n    }\n    isImportant() {\n        return getBit(this.mask, 1048576 /* NETWORK_FILTER_MASK.isImportant */);\n    }\n    isFullRegex() {\n        return getBit(this.mask, 4194304 /* NETWORK_FILTER_MASK.isFullRegex */);\n    }\n    isRegex() {\n        return (getBit(this.mask, 8388608 /* NETWORK_FILTER_MASK.isRegex */) ||\n            getBit(this.mask, 4194304 /* NETWORK_FILTER_MASK.isFullRegex */));\n    }\n    isPlain() {\n        return !this.isRegex();\n    }\n    isCSP() {\n        return getBit(this.mask, 262144 /* NETWORK_FILTER_MASK.isCSP */);\n    }\n    isElemHide() {\n        return this.isSpecificHide() && this.isGenericHide();\n    }\n    isSpecificHide() {\n        return getBit(this.mask, 2097152 /* NETWORK_FILTER_MASK.isSpecificHide */);\n    }\n    isGenericHide() {\n        return getBit(this.mask, 524288 /* NETWORK_FILTER_MASK.isGenericHide */);\n    }\n    isBadFilter() {\n        return getBit(this.mask, 131072 /* NETWORK_FILTER_MASK.isBadFilter */);\n    }\n    isUnicode() {\n        return getBit(this.mask, 16777216 /* NETWORK_FILTER_MASK.isUnicode */);\n    }\n    fromAny() {\n        return this.getCptMask() === FROM_ANY;\n    }\n    thirdParty() {\n        return getBit(this.mask, 32768 /* NETWORK_FILTER_MASK.thirdParty */);\n    }\n    firstParty() {\n        return getBit(this.mask, 16384 /* NETWORK_FILTER_MASK.firstParty */);\n    }\n    fromImage() {\n        return getBit(this.mask, 16 /* NETWORK_FILTER_MASK.fromImage */);\n    }\n    fromMedia() {\n        return getBit(this.mask, 32 /* NETWORK_FILTER_MASK.fromMedia */);\n    }\n    fromObject() {\n        return getBit(this.mask, 64 /* NETWORK_FILTER_MASK.fromObject */);\n    }\n    fromOther() {\n        return getBit(this.mask, 128 /* NETWORK_FILTER_MASK.fromOther */);\n    }\n    fromPing() {\n        return getBit(this.mask, 256 /* NETWORK_FILTER_MASK.fromPing */);\n    }\n    fromScript() {\n        return getBit(this.mask, 512 /* NETWORK_FILTER_MASK.fromScript */);\n    }\n    fromStylesheet() {\n        return getBit(this.mask, 1024 /* NETWORK_FILTER_MASK.fromStylesheet */);\n    }\n    fromDocument() {\n        return getBit(this.mask, 1 /* NETWORK_FILTER_MASK.fromDocument */);\n    }\n    fromSubdocument() {\n        return getBit(this.mask, 2048 /* NETWORK_FILTER_MASK.fromSubdocument */);\n    }\n    fromWebsocket() {\n        return getBit(this.mask, 4096 /* NETWORK_FILTER_MASK.fromWebsocket */);\n    }\n    fromHttp() {\n        return getBit(this.mask, 4 /* NETWORK_FILTER_MASK.fromHttp */);\n    }\n    fromHttps() {\n        return getBit(this.mask, 8 /* NETWORK_FILTER_MASK.fromHttps */);\n    }\n    fromXmlHttpRequest() {\n        return getBit(this.mask, 8192 /* NETWORK_FILTER_MASK.fromXmlHttpRequest */);\n    }\n    fromFont() {\n        return getBit(this.mask, 2 /* NETWORK_FILTER_MASK.fromFont */);\n    }\n}\n// ---------------------------------------------------------------------------\n// Filter parsing\n// ---------------------------------------------------------------------------\nfunction setNetworkMask(mask, m, value) {\n    if (value === true) {\n        return setBit(mask, m);\n    }\n    return clearBit(mask, m);\n}\n/**\n * Check if the sub-string contained between the indices start and end is a\n * regex filter (it contains a '*' or '^' char).\n */\nfunction checkIsRegex(filter, start, end) {\n    const indexOfSeparator = filter.indexOf('^', start);\n    if (indexOfSeparator !== -1 && indexOfSeparator < end) {\n        return true;\n    }\n    const indexOfWildcard = filter.indexOf('*', start);\n    return indexOfWildcard !== -1 && indexOfWildcard < end;\n}\n/**\n * Handle hostname anchored filters, given 'hostname' from ||hostname and\n * request's hostname, check if there is a match. This is tricky because\n * filters authors rely and different assumptions. We can have prefix of suffix\n * matches of anchor.\n */\nexport function isAnchoredByHostname(filterHostname, hostname, isFollowedByWildcard) {\n    // Corner-case, if `filterHostname` is empty, then it's a match\n    if (filterHostname.length === 0) {\n        return true;\n    }\n    // `filterHostname` cannot be longer than actual hostname\n    if (filterHostname.length > hostname.length) {\n        return false;\n    }\n    // If they have the same length, they should be equal\n    if (filterHostname.length === hostname.length) {\n        return filterHostname === hostname;\n    }\n    // Check if `filterHostname` appears anywhere in `hostname`\n    const matchIndex = hostname.indexOf(filterHostname);\n    // No match\n    if (matchIndex === -1) {\n        return false;\n    }\n    // `filterHostname` is a prefix of `hostname` and needs to match full a label.\n    //\n    // Examples (filterHostname, hostname):\n    //   * (foo, foo.com)\n    //   * (sub.foo, sub.foo.com)\n    if (matchIndex === 0) {\n        return (isFollowedByWildcard === true ||\n            hostname.charCodeAt(filterHostname.length) === 46 /* '.' */ ||\n            filterHostname.charCodeAt(filterHostname.length - 1) === 46 /* '.' */);\n    }\n    // `filterHostname` is a suffix of `hostname`.\n    //\n    // Examples (filterHostname, hostname):\n    //    * (foo.com, sub.foo.com)\n    //    * (com, foo.com)\n    if (hostname.length === matchIndex + filterHostname.length) {\n        return (hostname.charCodeAt(matchIndex - 1) === 46 /* '.' */ ||\n            filterHostname.charCodeAt(0) === 46 /* '.' */);\n    }\n    // `filterHostname` is infix of `hostname` and needs match full labels\n    return ((isFollowedByWildcard === true ||\n        hostname.charCodeAt(filterHostname.length) === 46 /* '.' */ ||\n        filterHostname.charCodeAt(filterHostname.length - 1) === 46) /* '.' */ &&\n        (hostname.charCodeAt(matchIndex - 1) === 46 || filterHostname.charCodeAt(0) === 46));\n}\n/**\n * Specialize a network filter depending on its type. It allows for more\n * efficient matching function.\n */\nfunction checkPattern(filter, request) {\n    const pattern = filter.getFilter();\n    if (filter.isHostnameAnchor() === true) {\n        // Make sure request is anchored by hostname before proceeding to matching\n        const filterHostname = filter.getHostname();\n        if (isAnchoredByHostname(filterHostname, request.hostname, filter.filter !== undefined && filter.filter.charCodeAt(0) === 42 /* '*' */) === false) {\n            return false;\n        }\n        // At this point we know request is hostname anchored so we match the rest of the filter.\n        if (filter.isRegex()) {\n            // ||pattern*^\n            return filter\n                .getRegex()\n                .test(request.url.slice(request.url.indexOf(filterHostname) + filterHostname.length));\n        }\n        else if (filter.isRightAnchor() && filter.isLeftAnchor()) {\n            // |||pattern|\n            // Since this is not a regex, the filter pattern must follow the hostname\n            // with nothing in between. So we extract the part of the URL following\n            // after hostname and will perform the matching on it.\n            const urlAfterHostname = request.url.slice(request.url.indexOf(filterHostname) + filterHostname.length);\n            // Since it must follow immediatly after the hostname and be a suffix of\n            // the URL, we conclude that filter must be equal to the part of the\n            // url following the hostname.\n            return pattern === urlAfterHostname;\n        }\n        else if (filter.isRightAnchor()) {\n            // ||pattern|\n            const requestHostname = request.hostname;\n            if (filter.hasFilter() === false) {\n                // In this specific case it means that the specified hostname should match\n                // at the end of the hostname of the request. This allows to prevent false\n                // positive like ||foo.bar which would match https://foo.bar.baz where\n                // ||foo.bar^ would not.\n                return (filterHostname.length === requestHostname.length ||\n                    requestHostname.endsWith(filterHostname));\n            }\n            else {\n                // pattern|\n                return request.url.endsWith(pattern);\n            }\n        }\n        else if (filter.isLeftAnchor()) {\n            // ||pattern + left-anchor => This means that a plain pattern needs to appear\n            // exactly after the hostname, with nothing in between.\n            // Since this is not a regex, the filter pattern must follow the hostname\n            // with nothing in between. So we extract the part of the URL following\n            // after hostname and will perform the matching on it.\n            return fastStartsWithFrom(request.url, pattern, request.url.indexOf(filterHostname) + filterHostname.length);\n        }\n        if (filter.hasFilter() === false) {\n            return true;\n        }\n        // We consider this a match if the plain patter (i.e.: filter) appears anywhere.\n        return (request.url.indexOf(pattern, request.url.indexOf(filterHostname) + filterHostname.length) !==\n            -1);\n    }\n    else if (filter.isRegex()) {\n        // pattern*^\n        return filter.getRegex().test(request.url);\n    }\n    else if (filter.isLeftAnchor() && filter.isRightAnchor()) {\n        // |pattern|\n        return request.url === pattern;\n    }\n    else if (filter.isLeftAnchor()) {\n        // |pattern\n        return fastStartsWith(request.url, pattern);\n    }\n    else if (filter.isRightAnchor()) {\n        // pattern|\n        return request.url.endsWith(pattern);\n    }\n    // pattern\n    if (filter.hasFilter() === false) {\n        return true;\n    }\n    return request.url.indexOf(pattern) !== -1;\n}\nfunction checkOptions(filter, request) {\n    // We first discard requests based on type, protocol and party. This is really\n    // cheap and should be done first.\n    if (filter.isCptAllowed(request.type) === false ||\n        (request.isHttps === true && filter.fromHttps() === false) ||\n        (request.isHttp === true && filter.fromHttp() === false) ||\n        (filter.firstParty() === false && request.isFirstParty === true) ||\n        (filter.thirdParty() === false && request.isThirdParty === true)) {\n        return false;\n    }\n    // If `sourceHostname` is *not* matched by `domain` then the request should be allowed.\n    if (filter.domains !== undefined &&\n        filter.domains.match(request.sourceHostnameHashes, request.sourceEntityHashes) === false) {\n        return false;\n    }\n    // If `hostname` is matched by `denyallow` then the request should be allowed.\n    if (filter.denyallow !== undefined &&\n        filter.denyallow.match(request.getHostnameHashes(), request.getEntityHashes()) === true) {\n        return false;\n    }\n    return true;\n}\n//# sourceMappingURL=network.js.map"],"names":[],"mappings":"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"}